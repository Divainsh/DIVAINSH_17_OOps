class Solution {
    public long maxPoints(int[][] points) {
        int m = points.length, n = points[0].length;
        long[] prevRow = new long[n];
        
        // Initialize the first row
        for (int j = 0; j < n; j++) {
            prevRow[j] = points[0][j];
        }
        
        // Process each row
        for (int i = 1; i < m; i++) {
            long[] leftMax = new long[n];
            long[] rightMax = new long[n];
            long[] currRow = new long[n];
            
            // Left-to-right sweep
            leftMax[0] = prevRow[0];
            for (int j = 1; j < n; j++) {
                leftMax[j] = Math.max(leftMax[j - 1] - 1, prevRow[j]);
            }
            
            // Right-to-left sweep
            rightMax[n - 1] = prevRow[n - 1];
            for (int j = n - 2; j >= 0; j--) {
                rightMax[j] = Math.max(rightMax[j + 1] - 1, prevRow[j]);
            }
            
            // Calculate current row
            for (int j = 0; j < n; j++) {
                currRow[j] = points[i][j] + Math.max(leftMax[j], rightMax[j]);
            }
            
            // Update previous row
            prevRow = currRow;
        }
        
        // Find maximum in the last row
        long maxPoints = 0;
        for (long pointsVal : prevRow) {
            maxPoints = Math.max(maxPoints, pointsVal);
        }
        
        return maxPoints;
    }
}
